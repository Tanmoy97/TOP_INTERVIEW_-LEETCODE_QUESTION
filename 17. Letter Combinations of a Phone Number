Given a string containing digits from 2-9 inclusive, return all possible letter combinations that the number could represent. Return the answer in any order.

A mapping of digit to letters (just like on the telephone buttons) is given below. Note that 1 does not map to any letters.



 

Example 1:

Input: digits = "23"
Output: ["ad","ae","af","bd","be","bf","cd","ce","cf"]
Example 2:

Input: digits = ""
Output: []
Example 3:

Input: digits = "2"
Output: ["a","b","c"]
 

Constraints:

0 <= digits.length <= 4
digits[i] is a digit in the range ['2', '9'].

SOLUTION:

class Solution {
public:
    // O(3 ^ n * 4 ^ m) time | O(3 ^ n * 4 ^ m) space
    // where n is the number of 3 char digits AND
    // m is the number of 4 char digits
    vector<string> letterCombinations(string digits) {
        if (empty(digits)) return {};
        
        vector<string> ans;
        vector<vector<char>> letters = {{'a','b','c'},
                                        {'d','e','f'},
                                        {'g','h','i'},
                                        {'j','k','l'},
                                        {'m','n','o'},
                                        {'p','q','r','s'},
                                        {'t','u','v'},
                                        {'w','x','y','z'}};        
        
        
        combinations(digits, 0, ans, letters, "");
        return ans;
    }
    
    void combinations(string digits, int idx, vector<string> &ans,
                     const vector<vector<char>> &letters, string temp) {    
        // base case
        if (size(temp) == size(digits)) {
            ans.push_back(temp);
            return;
        }

        // Go through each character from the digit
        for (char c : letters[digits[idx] - '0' - 2]) {
            temp += c;
            combinations(digits, idx + 1, ans, letters, temp);
            temp.pop_back();
        }
    }
};
ANOTHER SOLUTION:

class Solution {
public:

void compare(string str, int i, string n, vector<string> &num, vector<string> &apt){
    if(i==n.size()) {
        apt.push_back(str);
        return;
    }
    for(int j=0; j<num[n[i] - '2'].size(); j++){
        str.push_back(num[n[i] - '2'][j]);
        compare(str, i+1, n, num, apt);
        str.pop_back();
    }
}
vector<string> letterCombinations(string digits) {
    vector<string> number;
    number.push_back("abc");
    number.push_back("def");
    number.push_back("ghi");
    number.push_back("jkl");
    number.push_back("mno");
    number.push_back("pqrs");
    number.push_back("tuv");
    number.push_back("wxyz");
    string s;
    vector<string> ans;
    if(digits.size()==0)
        return ans;
    compare(s, 0, digits, number, ans);
    return ans;    
}
};
