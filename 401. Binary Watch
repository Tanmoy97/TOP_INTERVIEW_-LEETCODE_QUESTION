A binary watch has 4 LEDs on the top which represent the hours (0-11), and the 6 LEDs on the bottom represent the minutes (0-59).

Each LED represents a zero or one, with the least significant bit on the right.


For example, the above binary watch reads "3:25".

Given a non-negative integer n which represents the number of LEDs that are currently on, return all possible times the watch could represent.

Example:

Input: n = 1
Return: ["1:00", "2:00", "4:00", "8:00", "0:01", "0:02", "0:04", "0:08", "0:16", "0:32"]
Note:
The order of output does not matter.
The hour must not contain a leading zero, for example "01:00" is not valid, it should be "1:00".
The minute must be consist of two digits and may contain a leading zero, for example "10:2" is not valid, it should be "10:02".

SOLUTION:

class Solution {
public:
    int bit_count(int n){
        int ans = 0; 
        while(n){
            if(n&1)
                ans++;
            n = n >> 1; 
        }
        return ans;
    }
    
    vector<string> readBinaryWatch(int num) {
        vector<string> ans;
        
        int n = 1023;
        
        for(int i = 0 ; i <= n ; i++){
            int c = bit_count(i);
            if(c == num){
                int mi = i & 63;
                int hr = 15 << 6;
                hr = hr & i; 
                hr = hr >> 6;
                if(hr < 12 && mi < 60)
                    ans.push_back(to_string(hr)+(mi < 10 ? ":0" : ":")+to_string(mi));
                cout << i << " ";
            }
        }
        
        return ans;
    }
};
