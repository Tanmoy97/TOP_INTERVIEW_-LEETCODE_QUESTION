Given a singly linked list, group all odd nodes together followed by the even nodes. Please note here we are talking about the node number and not the value in the nodes.

You should try to do it in place. The program should run in O(1) space complexity and O(nodes) time complexity.

Example 1:

Input: 1->2->3->4->5->NULL
Output: 1->3->5->2->4->NULL
Example 2:

Input: 2->1->3->5->6->4->7->NULL
Output: 2->3->6->7->1->5->4->NULL
 

Constraints:

The relative order inside both the even and odd groups should remain as it was in the input.
The first node is considered odd, the second node even and so on ...
The length of the linked list is between [0, 10^4].

SOLUTION:

class Solution {
public:
    ListNode* oddEvenList(ListNode* head) {
         if(head==NULL || head->next==NULL || head->next->next==NULL){
          return head;
 }
 ListNode* evenhead = head->next;  // we have to save the head for even part
 
 ListNode* odd=head;              // pointer which connect the odd to odd
 ListNode* even=head->next;       // pointer which connect even to even
 
 while(odd->next != NULL and even->next != NULL){
     
     odd->next=even->next; // next odd will be next of even
     odd=odd->next;
     
     even->next=odd->next; // next even will be the next of odd
     even=even->next;
     
 }
 
 odd->next = evenhead; // at last we just append the even part after odd part
 
 return head;
    }
};
