Given a string containing just the characters '(' and ')', find the length of the longest valid (well-formed) parentheses substring.

 

Example 1:

Input: s = "(()"
Output: 2
Explanation: The longest valid parentheses substring is "()".
Example 2:

Input: s = ")()())"
Output: 4
Explanation: The longest valid parentheses substring is "()()".
Example 3:

Input: s = ""
Output: 0
 

Constraints:

0 <= s.length <= 3 * 10^4
s[i] is '(', or ')'.

SOLUTION:

class Solution {
public:
    int longestValidParentheses(string s) {
      int longestString=0;            
    stack<int> st;                      
    for(int i=0; i<s.length(); i++){
        if(s[i] == '('){               
            st.push(i);
        }else{                    
            if( !st.empty() and s[st.top()] == '(' ){          
                st.pop();
                if(st.empty()){
                    longestString = max( longestString, i+1 );
                }else{
                    longestString = max( longestString, i-st.top() );
                }
            }else{
                st.push(i);
            }
        }           
    }        
    return longestString;  
    }
};
