Implement the RandomizedSet class:

bool insert(int val) Inserts an item val into the set if not present. Returns true if the item was not present, false otherwise.
bool remove(int val) Removes an item val from the set if present. Returns true if the item was present, false otherwise.
int getRandom() Returns a random element from the current set of elements (it's guaranteed that at least one element exists when this method is called). Each element must have the same probability of being returned.
Follow up: Could you implement the functions of the class with each function works in average O(1) time?

 

Example 1:

Input
["RandomizedSet", "insert", "remove", "insert", "getRandom", "remove", "insert", "getRandom"]
[[], [1], [2], [2], [], [1], [2], []]
Output
[null, true, false, true, 2, true, false, 2]

Explanation
RandomizedSet randomizedSet = new RandomizedSet();
randomizedSet.insert(1); // Inserts 1 to the set. Returns true as 1 was inserted successfully.
randomizedSet.remove(2); // Returns false as 2 does not exist in the set.
randomizedSet.insert(2); // Inserts 2 to the set, returns true. Set now contains [1,2].
randomizedSet.getRandom(); // getRandom() should return either 1 or 2 randomly.
randomizedSet.remove(1); // Removes 1 from the set, returns true. Set now contains [2].
randomizedSet.insert(2); // 2 was already in the set, so return false.
randomizedSet.getRandom(); // Since 2 is the only number in the set, getRandom() will always return 2.
 

Constraints:

-231 <= val <= 231 - 1
At most 105 calls will be made to insert, remove, and getRandom.
There will be at least one element in the data structure when getRandom is called.

SOLUTION:


// Time: O(1), Space: O(n)
class RandomizedSet {
public:
    /** Initialize your data structure here. */
    RandomizedSet() {
    }
    
    /** Inserts a value to the set. Returns true if the set did not already contain the specified element. */
    bool insert(int val) {
        if(ht.find(val)==ht.end()){
            vec.push_back(val);
            ht[val]=vec.size()-1;
            return true;
        }
        else
            return false;
    }
    
    /** Removes a value from the set. Returns true if the set contained the specified element. */
    bool remove(int val) {
        if(ht.find(val)!=ht.end()){
            vec[ht[val]]=vec[vec.size()-1];
            ht[vec[vec.size()-1]]=ht[val];
            vec.pop_back();
            ht.erase(val);
            return true;
        }
        else 
            return false;
    }
    
    /** Get a random element from the set. */
    int getRandom() {
        if(vec.size()==1)
            return vec[0];
        else{
            int idx=rand()%(vec.size());
            return vec[idx];   
        }
    }
    
    unordered_map<int,int> ht;
    vector<int> vec;
};
When I first looked at the problem, it seems quite straightforward. Inserting and deleting in constant time means hashtable. But when I start working on the get random, it starts to get trickier. I was initially thinking that I can find random in constant time using unordered_set iterator and do something like (ht.begin()+somerandint). But I realized that ht iterator is not a random access iterator, meaning in order to get to a specific iterator I have to iterator from the begin iterator which takes linear time. Therefore, we need a container with random access. vector is an obvious choice. But I was stuck again, because vector erasing sounds like linear time. After looking at the solution, I realize that the erasing is usually linear because we need to keep the order vector. In cases like this, we don't care about maintaining the order of elements and removing a specific element can be done in constant time by utilizing pop_back().

Not very familiar with the random stl class, so if there's a better way to get rand from a vector, let me know.
