Given the root of a binary tree, determine if it is a valid binary search tree (BST).

A valid BST is defined as follows:

The left subtree of a node contains only nodes with keys less than the node's key.
The right subtree of a node contains only nodes with keys greater than the node's key.
Both the left and right subtrees must also be binary search trees.
 

Example 1:


Input: root = [2,1,3]
Output: true
Example 2:


Input: root = [5,1,4,null,null,3,6]
Output: false
Explanation: The root node's value is 5 but its right child's value is 4.
 

Constraints:

The number of nodes in the tree is in the range [1, 10^4].
-2^31 <= Node.val <= 2^31 - 1

SOLUTION:


class Solution {
public:
bool isValidBST(TreeNode* node, 
    TreeNode *minNode=NULL, TreeNode *maxNode=NULL) {

        // Empty Tree || Leaf Nodes => Valid BST
    if(!node) return true;

        // Node not satisfying BST rule
    if((minNode && node->val <= minNode->val) || 
       (maxNode && node->val >= maxNode->val))	
        return false;

        // Recursively check left and right sub trees
    bool isLeftBST = isValidBST(node->left,minNode,node);
    bool isRightBST = isValidBST(node->right,node,maxNode);

    return isLeftBST && isRightBST;

}

};
