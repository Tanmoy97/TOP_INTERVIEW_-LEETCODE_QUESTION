Given n non-negative integers representing an elevation map where the width of each bar is 1, compute how much water it can trap after raining.

 

Example 1:


Input: height = [0,1,0,2,1,0,1,3,2,1,2,1]
Output: 6
Explanation: The above elevation map (black section) is represented by array [0,1,0,2,1,0,1,3,2,1,2,1]. In this case, 6 units of rain water (blue section) are being trapped.
Example 2:

Input: height = [4,2,0,3,2,5]
Output: 9
 

Constraints:

n == height.length
0 <= n <= 3 * 10^4
0 <= height[i] <= 10^5

SOLUTION:

class Solution {
public:
    int trap(vector<int>& height) {
        int n=height.size();
         if(n<3) return 0;
         vector<int> lh(n),rh(n); 
        
         lh[0]=height[0];
         int mx=height[0];
         for(int i=1;i<n;i++)
         {   mx=max(mx,height[i]);   //find left max height for every building
             lh[i]=mx; 
         }
         
         rh[n-1]=height[n-1];
         mx=height[n-1];
         for(int i=n-2;i>=0;i--)
         {    mx=max(mx,height[i]);  //find right max height for every building 
              rh[i]=mx;
         }
        
          int w=0;
          for(int i=0;i<n;i++)
         {   //cout<<lh[i]<<" "<<h[i]<<" "<<rh[i]<<"\n";
             w+=min(lh[i],rh[i])-height[i];   
         }
         return w;
           
    }
};
