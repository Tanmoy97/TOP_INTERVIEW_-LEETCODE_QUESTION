Given inorder and postorder traversal of a tree, construct the binary tree.

Note:
You may assume that duplicates do not exist in the tree.

For example, given

inorder = [9,3,15,20,7]
postorder = [9,15,7,20,3]
Return the following binary tree:

    3
   / \
  9  20
    /  \
   15   7
   
   SOLUTION:
   
   
class Solution {
public:
        TreeNode* tree(int postEnd, int inStart, int inEnd, vector<int>& postorder, vector<int>& inorder) {
            
            if((postEnd < 0) or (inStart > inEnd))
                return NULL;

            TreeNode* root = new TreeNode(postorder[postEnd]);

            int i;
            for(i=inStart; i<=inEnd; i++)
                if(postorder[postEnd] == inorder[i])
                    break;
            
            // RSS = length of right subtree
            int RSS = inEnd - i;
           
            root->left = tree(postEnd-RSS-1, inStart, i-1, postorder, inorder);
            root->right = tree(postEnd-1, i+1, inEnd, postorder, inorder);

            return root;
    }
    
    TreeNode* buildTree(vector<int>& inorder, vector<int>& postorder) {
        return tree(postorder.size()-1, 0, inorder.size()-1, postorder, inorder);
    }
};
