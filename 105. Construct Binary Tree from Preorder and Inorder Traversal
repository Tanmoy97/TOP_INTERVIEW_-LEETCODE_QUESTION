Given preorder and inorder traversal of a tree, construct the binary tree.

Note:
You may assume that duplicates do not exist in the tree.

For example, given

preorder = [3,9,20,15,7]
inorder = [9,3,15,20,7]
Return the following binary tree:

    3
   / \
  9  20
    /  \
   15   7
   
   SOLUTION:
   
   
 /**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    TreeNode* buildTree(vector<int>& preorder, vector<int>& inorder) {
        int start=0;
        unordered_map<int,int> checkIndex;
        for(int i=0;i<inorder.size();i++){
            checkIndex[inorder[i]]=i;
        }
        return tree(preorder,inorder,0,preorder.size()-1,checkIndex,start);
    }
    TreeNode* tree(vector<int>& preorder, vector<int>& inorder,int start,int end,unordered_map<int,int>& checkIndex,int& currentIndex) {
        if(start>end){
            return NULL;
        }
        TreeNode* root=new TreeNode(preorder[currentIndex]);
        
        int divider=checkIndex[preorder[currentIndex++]];
        root->left=tree(preorder,inorder,start,divider-1,checkIndex,currentIndex);
        root->right=tree(preorder,inorder,divider+1,end,checkIndex,currentIndex);
        return root;
    
    }
};
   
