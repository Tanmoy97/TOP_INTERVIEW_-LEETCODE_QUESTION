Given two sorted arrays nums1 and nums2 of size m and n respectively, return the median of the two sorted arrays.

Follow up: The overall run time complexity should be O(log (m+n)).

 

Example 1:

Input: nums1 = [1,3], nums2 = [2]
Output: 2.00000
Explanation: merged array = [1,2,3] and median is 2.
Example 2:

Input: nums1 = [1,2], nums2 = [3,4]
Output: 2.50000
Explanation: merged array = [1,2,3,4] and median is (2 + 3) / 2 = 2.5.
Example 3:

Input: nums1 = [0,0], nums2 = [0,0]
Output: 0.00000
Example 4:

Input: nums1 = [], nums2 = [1]
Output: 1.00000
Example 5:

Input: nums1 = [2], nums2 = []
Output: 2.00000
 

Constraints:

nums1.length == m
nums2.length == n
0 <= m <= 1000
0 <= n <= 1000
1 <= m + n <= 2000
-10^6 <= nums1[i], nums2[i] <= 10^6

SOLUTION(USING MERGE SORT):

class Solution {
public:
    double findMedianSortedArrays(vector<int>& nums1, vector<int>& nums2) {
        if(nums1.size()==0 && nums2.size()==0)
        return -1;
        int n1= nums1.size();
        int n2= nums2.size();
        vector<int>nums3(n1+n2);
  
        merge(nums1.begin(),nums1.end(),nums2.begin(),nums2.end(),nums3.begin());
    
   
    
        int l=n1+n2;
        double f = l%2==0?(double)(nums3[l/2 -1]+nums3[l/2])/2:(double)nums3[l/2];
    
   return f;
    }
};

ANOTHER SOLUTION(USING BINARY SEARCH):

class Solution {
public:
    double findMedianSortedArrays(vector<int>& nums1, vector<int>& nums2) {
    int m=nums1.size();
    int n=nums2.size();
    if(m>n)
        return findMedianSortedArrays(nums2,nums1);
    int start=0;
    int end=m;
   while(start<=end)
    {
        int i=start+(end-start)/2;
        int j=(m+n+1)/2-i;
        int min1=(i==m)?INT_MAX:nums1[i];
        int min2=(j==n)?INT_MAX:nums2[j];
        int max1=(i==0)?INT_MIN:nums1[i-1];
        int max2=(j==0)?INT_MIN:nums2[j-1];
        if(max1<=min2 && max2 <=min1)
        {
            if((m+n)%2==0)
            {
                return (double)(max(max1,max2)+min(min1,min2))/2;
            }
            else
            return (double)max(max1,max2);
        }
        else if(max1 > min2)
        end=i-1;
        else
        start=i+1;
        }
        return -1;
    }
};
