Given a non-empty array of integers, return the k most frequent elements.

Example 1:

Input: nums = [1,1,1,2,2,3], k = 2
Output: [1,2]
Example 2:

Input: nums = [1], k = 1
Output: [1]
Note:

You may assume k is always valid, 1 ≤ k ≤ number of unique elements.
Your algorithm's time complexity must be better than O(n log n), where n is the array's size.
It's guaranteed that the answer is unique, in other words the set of the top k frequent elements is unique.
You can return the answer in any order.

SOLUTION:

class Solution {
public:
    typedef pair<int, int> p;
    vector<int>res;//for storing result
    vector<int> topKFrequent(vector<int>& nums, int k) {
       unordered_map<int,int> mp;//map to store elements with its frequency
        for(int i=0;i<nums.size();i++)
        {
            mp[nums[i]]++;//if element matches with next elemnt it increases the frequency
        }
        priority_queue<p,vector<p>,greater<p>> minh;//min heap
        for(auto i=mp.begin();i!=mp.end();i++)//itrate map to push element in minheap
        {
            minh.push({i->second,i->first});
            if(minh.size()>k) //pop if size is more then k
            {
                minh.pop();
            }
        }
        while(!minh.empty())//push elements in the result array
        {
           res.push_back(minh.top().second);
            minh.pop();
        }
        return res;
    }
};

Time: o (n log k)
Space: o (n + k)
