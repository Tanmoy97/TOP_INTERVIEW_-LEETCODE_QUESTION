Given an m x n 2d grid map of '1's (land) and '0's (water), return the number of islands.

An island is surrounded by water and is formed by connecting adjacent lands horizontally or vertically. You may assume all four edges of the grid are all surrounded by water.

 

Example 1:

Input: grid = [
  ["1","1","1","1","0"],
  ["1","1","0","1","0"],
  ["1","1","0","0","0"],
  ["0","0","0","0","0"]
]
Output: 1
Example 2:

Input: grid = [
  ["1","1","0","0","0"],
  ["1","1","0","0","0"],
  ["0","0","1","0","0"],
  ["0","0","0","1","1"]
]
Output: 3
 

Constraints:

m == grid.length
n == grid[i].length
1 <= m, n <= 300
grid[i][j] is '0' or '1'.

SOLUTION:

class Solution {
public:
   //make as visited as you traverse by making it "0"(change from land to water)
    void bfs(vector<vector<char>>& grid, int i, int j, int n, int m){
        grid[i][j] = '0';
        
        if(i-1 >= 0 && grid[i-1][j] == '1') //up
            bfs(grid, i-1, j, n, m);
        if(i+1 < n && grid[i+1][j] == '1') //down
            bfs(grid, i+1, j, n, m);
        if(j+1 < m && grid[i][j+1] == '1') //right
            bfs(grid, i, j+1, n, m);
        if(j-1 >= 0 && grid[i][j-1] == '1') //left
            bfs(grid, i, j-1, n, m);
    }
        
    int numIslands(vector<vector<char>>& grid) {
        int n = grid.size();
        int m = grid[0].size();
        int count = 0;
        for(int i = 0; i < n; i++){
            for(int j = 0; j < m; j++){
                if(grid[i][j] == '1'){
                    bfs(grid, i, j , n, m);
                    count++;
                }    
            }
        }
        return count;
    }
};

ANOTHER SOLUTION:

class Solution {
public:
    void dfs(vector<vector<char>>& grid,int i,int j){
        if(i<0||j<0||i>=grid.size()||j>=grid[i].size()||grid[i][j]=='0')
            return;
        grid[i][j]='0';
        dfs(grid,i+1,j);
        dfs(grid,i-1,j);
           dfs(grid,i,j-1);
         dfs(grid,i,j+1);
        return ;
        }
    
    int numIslands(vector<vector<char>>& grid) {
        int x=0;
        for(int i=0;i<grid.size();i++){
            for(int j=0;j<grid[i].size();j++){
                if(grid[i][j]=='1'){
                    dfs(grid,i,j);
                    x++;   
                }
            }         
        }
          return x;  
    }
};
