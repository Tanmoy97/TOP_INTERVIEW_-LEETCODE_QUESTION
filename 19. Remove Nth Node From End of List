Given the head of a linked list, remove the nth node from the end of the list and return its head.

Follow up: Could you do this in one pass?

 

Example 1:


Input: head = [1,2,3,4,5], n = 2
Output: [1,2,3,5]
Example 2:

Input: head = [1], n = 1
Output: []
Example 3:

Input: head = [1,2], n = 1
Output: [1]
 

Constraints:

The number of nodes in the list is sz.
1 <= sz <= 30
0 <= Node.val <= 100
1 <= n <= sz

SOLUTION:

class Solution {
public:
    ListNode* removeNthFromEnd(ListNode* head, int n) {
        int l=0;
        ListNode* t=head;
        //find length of list
        while(t){
            l++;
            t=t->next;
        }
        //index from front
        l=l-n;
        //case1
        if(l==0){
            head=head->next;
            return head;
        }
        //case2
        t=head;
        for(int i=0;i!=l-1;i++){
            t=t->next;
        }
        t->next=(t->next)->next;
        return head;
    }
};
