Given a string s and a non-empty string p, find all the start indices of p's anagrams in s.

Strings consists of lowercase English letters only and the length of both strings s and p will not be larger than 20,100.

The order of output does not matter.

Example 1:

Input:
s: "cbaebabacd" p: "abc"

Output:
[0, 6]

Explanation:
The substring with start index = 0 is "cba", which is an anagram of "abc".
The substring with start index = 6 is "bac", which is an anagram of "abc".
Example 2:

Input:
s: "abab" p: "ab"

Output:
[0, 1, 2]

Explanation:
The substring with start index = 0 is "ab", which is an anagram of "ab".
The substring with start index = 1 is "ba", which is an anagram of "ab".
The substring with start index = 2 is "ab", which is an anagram of "ab".

SOLUTION:

class Solution {
public:
    vector<int> findAnagrams(string s, string p) {
        int i,j,flag=0,k;
        string ans;
        vector<int> v;//To store the Answer
        vector<int> w1(26,0),w2(26,0); //Initializing 2 vectors of size 26 with all values as '0'
        
        if(s.length()<p.length())//Checking the base condition
            return v;
        
        for(i=0;p[i];i++)
            w1[p[i]-'a']++;
        for(i=0;i<p.length();i++)
            w2[s[i]-'a']++;
        
        if(w1==w2)//Vector Comparision
            v.push_back(0);
        j=0;
        
        for(i=p.length();i<s.length();i++)
        {
            w2[s[j]-'a']--;
            w2[s[i]-'a']++;
            j++;
            if(w1==w2)//Vector Comparision
                v.push_back(j);
        }
       return v; 
    }
};
