Given an m x n board and a word, find if the word exists in the grid.

The word can be constructed from letters of sequentially adjacent cells, where "adjacent" cells are horizontally or vertically neighboring. The same letter cell may not be used more than once.

 

Example 1:


Input: board = [["A","B","C","E"],["S","F","C","S"],["A","D","E","E"]], word = "ABCCED"
Output: true
Example 2:


Input: board = [["A","B","C","E"],["S","F","C","S"],["A","D","E","E"]], word = "SEE"
Output: true
Example 3:


Input: board = [["A","B","C","E"],["S","F","C","S"],["A","D","E","E"]], word = "ABCB"
Output: false
 

Constraints:

m == board.length
n = board[i].length
1 <= m, n <= 200
1 <= word.length <= 10^3
board and word consists only of lowercase and uppercase English letters.

SOLUTION:

// Using DFS + Backtracking
class Solution {
public:
	// Check the boundary cases of the board.
    bool isSafe(int N, int M, int i, int j){
        return (i<N) && (i>=0) && (j>=0) && (j<M);
    }
    bool backtrack(vector<vector<char>>& board, string& word, int pos, int i, int j){
        if(word[pos]!=board[i][j]){
            return false;
        }
        if(pos==word.length()-1){
            return true;
        }
		// to avoid using of this character again in the backtracking
        board[i][j] = '#';
        if(isSafe(board.size(), board[0].size(), i+1, j)){
            if(backtrack(board, word, pos+1, i+1, j))
                return true;
        }
        if(isSafe(board.size(), board[0].size(), i-1, j)){
            if(backtrack(board, word, pos+1, i-1, j))
                return true;
        }
        if(isSafe(board.size(), board[0].size(), i, j+1)){
            if(backtrack(board, word, pos+1, i, j+1))
                return true;
        }
        if(isSafe(board.size(), board[0].size(), i, j-1)){
            if(backtrack(board, word, pos+1, i, j-1))
                return true;
        }
		// Reassigning the character as backtracking is complete.
        board[i][j] = word[pos];
        return false;
    }
    bool exist(vector<vector<char>>& board, string word) {
        for(int i=0;i<board.size();i++){
            for(int j=0;j<board[i].size();j++){
                if(board[i][j]==word[0])   // This condition is not necessary as it will also be checked in the backtracking function.
                    if(backtrack(board, word, 0, i, j))
                        return true;
            }
        }
        return false;
    }
};
