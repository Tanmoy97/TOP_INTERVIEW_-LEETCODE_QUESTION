Given a non-empty string s and a dictionary wordDict containing a list of non-empty words, determine if s can be segmented into a space-separated sequence of one or more dictionary words.

Note:

The same word in the dictionary may be reused multiple times in the segmentation.
You may assume the dictionary does not contain duplicate words.
Example 1:

Input: s = "leetcode", wordDict = ["leet", "code"]
Output: true
Explanation: Return true because "leetcode" can be segmented as "leet code".
Example 2:

Input: s = "applepenapple", wordDict = ["apple", "pen"]
Output: true
Explanation: Return true because "applepenapple" can be segmented as "apple pen apple".
             Note that you are allowed to reuse a dictionary word.
Example 3:

Input: s = "catsandog", wordDict = ["cats", "dog", "sand", "and", "cat"]
Output: false

SOLUTION:

class Solution {
public:
    bool wordBreak(string s, vector<string>& wordDict) {
        int words=wordDict.size();
    int i,j;
    int ss=s.size();     
    vector<bool> dp(ss+1, false);
        
    dp[0]=true;
    string temp;
    
    for (i=0; i<ss;i++){            
        for (j=i+1;j<ss+1;j++){
            if (dp[i]!=true)
                break;                
            temp=s.substr (i,j-i); 

            if(find(wordDict.begin(),wordDict.end(),temp)!=wordDict.end()){
                dp[j]=true;
            }
            
        }
    }
    
    return dp[ss];
    }
};

