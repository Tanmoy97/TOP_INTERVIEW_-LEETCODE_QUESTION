Given the head of a linked list, rotate the list to the right by k places.

 

Example 1:


Input: head = [1,2,3,4,5], k = 2
Output: [4,5,1,2,3]
Example 2:


Input: head = [0,1,2], k = 4
Output: [2,0,1]
 

Constraints:

The number of nodes in the list is in the range [0, 500].
-100 <= Node.val <= 100
0 <= k <= 2 * 10^9

SOLUTION:

class Solution {
public:
    ListNode* rotateRight(ListNode* head, int k) {
         if(head==NULL)
    {
        return NULL;
    }
    
    int len=0;
    ListNode* temp=head;
    
    while(temp!=NULL)
    {
        len++;
        temp=temp->next;
    }
    
    k=k%len;
    
    if(k==0)
    {
        return head;
    }
    
    temp=head;
    
    for(int i=0;i<len-k-1;i++)
    {
        temp=temp->next;
    }
    
    ListNode* newhead=temp->next;
    temp->next=NULL;
    
    temp=newhead;
    
    while(temp->next)
    {
        temp=temp->next;
    }
    
    temp->next=head;
    
    return newhead;
    
}
    
};
