Given an m x n matrix. If an element is 0, set its entire row and column to 0. Do it in-place.

Follow up:

A straight forward solution using O(mn) space is probably a bad idea.
A simple improvement uses O(m + n) space, but still not the best solution.
Could you devise a constant space solution?
 

Example 1:


Input: matrix = [[1,1,1],[1,0,1],[1,1,1]]
Output: [[1,0,1],[0,0,0],[1,0,1]]
Example 2:


Input: matrix = [[0,1,2,0],[3,4,5,2],[1,3,1,5]]
Output: [[0,0,0,0],[0,4,5,0],[0,3,1,0]]
 

Constraints:

m == matrix.length
n == matrix[0].length
1 <= m, n <= 200
-2^31 <= matrix[i][j] <= 2^31 - 1

SOLUTION:

STEPS :
1. Now start from matrix(0,0) and check

  If first row has zero ?
  If first column has zero?
2. Make use of hasFirstRowZero and hasFirstColZero
start from matrix(1,1) and check if matrix(i,j) is zero ?

3. start from matrix(1,1) and check
If topmost or leftmost element zero ?

4. check hasFirstRowZero and hasFirstColZero
set zeroes for first row set zeroes for first column

T = O(R*C) where R is row size & C is column size
S = O(1)
class Solution {
public:
    void setZeroes(vector<vector<int>>& matrix) {
       int R = matrix.size();
       int C = matrix[0].size();
       if(R == 0 || C == 0) return;
        /// STEP 1
        bool hasFirstRowZero = false;
        bool hasFirstColZero = false;
        
        // Now start from matrix(0,0)
        //If first row has zero ?
        for(int i = 0; i < C; i++) {
            if(matrix[0][i] == 0) {
                hasFirstRowZero = true;
                break;
            }
        }
        
          //If first column has zero ?
        for(int i = 0; i < R; i++) {
            if(matrix[i][0] == 0) {
                hasFirstColZero = true;
                break;
            }
        }
        
        /// STEP 2(make use of hasFirstRowZero and hasFirstColZero)
        // start from matrix(1,1) and check if matrix(i,j) is zero ?
        for(int i = 1; i < R; i++) {
            for(int j = 1; j < C; j++) {
                if(matrix[i][j] == 0) {
                    matrix[i][0] = 0;  // leftmost element set 0
                    matrix[0][j] = 0;  // topmost element set 0
                }
            }
        }
        
        /// STEP 3
        // start from matrix(1,1) and check topmost and leftmost element zero ?
        for(int i = 1; i < R; i++) {
            for(int j = 1; j < C; j++) {
                if(matrix[i][0] == 0 || matrix[0][j] == 0) {
                    matrix[i][j] = 0;
                }
            }
        }
        
        /// STEP 4
        // set zeroes for first row
        if(hasFirstRowZero) {
            for(int i = 0; i < C; i++) {
                matrix[0][i] = 0;
            }
        }
        
        // set zeroes for first column
        if(hasFirstColZero) {
            for(int i = 0; i < R; i++) {
                matrix[i][0] = 0;
            }
        }
    }
};
