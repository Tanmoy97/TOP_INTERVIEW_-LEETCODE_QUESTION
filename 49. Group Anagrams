Given an array of strings strs, group the anagrams together. You can return the answer in any order.

An Anagram is a word or phrase formed by rearranging the letters of a different word or phrase, typically using all the original letters exactly once.

 

Example 1:

Input: strs = ["eat","tea","tan","ate","nat","bat"]
Output: [["bat"],["nat","tan"],["ate","eat","tea"]]
Example 2:

Input: strs = [""]
Output: [[""]]
Example 3:

Input: strs = ["a"]
Output: [["a"]]
 

Constraints:

1 <= strs.length <= 104
0 <= strs[i].length <= 100
strs[i] consists of lower-case English letters.

SOLUTION:

class Solution {
public:
    vector<vector<string>> groupAnagrams(vector<string>& strs) {
        vector<vector<string>> ans;

		unordered_map<string,vector<string>> m;

		for(auto w:strs){
			string tmp = w; // store the string in a tmp variable
			sort(tmp.begin(), tmp.end()); //sort it
			m[tmp].push_back(w); //and push it in a map
		}

		for(auto x:m){
			ans.push_back(x.second);
		}

		return ans;
    }
};

ANOTHER SOLUTION:

class Solution {
public:
    vector<vector<string>> groupAnagrams(vector<string>& strs) {
       unordered_map<string,vector<string>> umap;
        int n = strs.size();
        string temp;
        
        for(int i=0;i<n;i++){
            temp = strs[i];
            sort(strs[i].begin(),strs[i].end()); //eat becomes aet
            umap[strs[i]].push_back(temp);// aet stores eat,tea,ate
        }
        
        vector<vector<string>> res;
        
        for(auto i=umap.begin();i!=umap.end();i++){
            res.push_back(i->second); //ignoring the key of umap only adding its resp vector values
        }
        return res;
    }
};
