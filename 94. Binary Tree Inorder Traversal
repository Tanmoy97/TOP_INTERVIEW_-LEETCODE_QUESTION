Given the root of a binary tree, return the inorder traversal of its nodes' values.

 

Example 1:


Input: root = [1,null,2,3]
Output: [1,3,2]
Example 2:

Input: root = []
Output: []
Example 3:

Input: root = [1]
Output: [1]
Example 4:


Input: root = [1,2]
Output: [2,1]
Example 5:


Input: root = [1,null,2]
Output: [1,2]
 

Constraints:

The number of nodes in the tree is in the range [0, 100].
-100 <= Node.val <= 100
 

Follow up:

Recursive solution is trivial, could you do it iteratively?

SOLUTION:

RECURSIVE SOL:
class Solution {
private:
    void inorder(TreeNode* root, vector<int> &ans)
    {
        if(root==NULL)
            return;
        inorder(root->left, ans);
        ans.push_back(root->val);
        inorder(root->right, ans);
    }
    
public:
    vector<int> inorderTraversal(TreeNode* root) {
        vector<int> ans;
        inorder(root, ans);
        return ans;
    }
};

ITERATIVE SOL:

class Solution {
public:
    vector<int> inorderTraversal(TreeNode* root) {
        vector<int> ans;        
        stack<TreeNode*> st;
        
        while(1) {
            while(root) {
                st.push(root);
                root= root->left;
            }
            if(st.empty())
                break;
            
            root= st.top();
            st.pop();
            ans.push_back(root->val);
            
            root= root->right;
        }
        return ans;
    }
};
