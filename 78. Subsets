Given an integer array nums, return all possible subsets (the power set).

The solution set must not contain duplicate subsets.

 

Example 1:

Input: nums = [1,2,3]
Output: [[],[1],[2],[1,2],[3],[1,3],[2,3],[1,2,3]]
Example 2:

Input: nums = [0]
Output: [[],[0]]
 

Constraints:

1 <= nums.length <= 10
-10 <= nums[i] <= 10
All the numbers of nums are unique.

SOLUTION:

This is a method of increasing subsets from the previous subset by appending target.

For example, if the input was {1, 2, 3}, the initial subset is {{}} .
through the first iteration, when target is 1, {{}, {1}} ( {{}} + {{1}} )
Then when target is 2, {{}, {1}, {2}, {1, 2}} ( {{}, {1}} + {{2}, {1, 2}} ),
Then when target is 3,{{}, {1}, {2}, {1, 2}, {3}, {1, 3}, {2, 3}, {1, 2, 3}} ({{}, { 1}, {2}, {1, 2}} + {{3}, {1, 3}, {2, 3}, {1, 2, 3}})

class Solution {
public:
    vector<vector<int>> subsets(vector<int>& nums) {
        vector<vector<int>> subsets;
        subsets.push_back({});
        for(auto& target : nums ) {
             for(int i = 0, count = subsets.size(); i < count; ++i) {
                auto subset = subsets[i];
                subset.push_back(target);
                subsets.push_back(subset);
            }
        }
        return subsets;
    }
};

